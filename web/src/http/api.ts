/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * reffer.al
 * OpenAPI spec version: 0.0.1
 */
export type SubscribeToEventBody = {
  name: string;
  email: string;
  /** @nullable */
  referrer?: string | null;
};

export type SubscribeToEvent201 = {
  subscriberID: string;
};

/**
 * @nullable
 */
export type GetInvitesSubscriberID302 = typeof GetInvitesSubscriberID302[keyof typeof GetInvitesSubscriberID302] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetInvitesSubscriberID302 = {
  null: 'null',
} as const;

export type GetSubscribersSubscriberIDRankingClicks200 = {
  count: number;
};

export type GetSubscribersSubscriberIDRankingCount200 = {
  count: number;
};

export type GetSubscribersSubscriberIDRankingPosition200 = {
  /** @nullable */
  position: number | null;
};

export type GetRanking200RankingItem = {
  id: string;
  name: string;
  score: number;
};

export type GetRanking200 = {
  ranking: GetRanking200RankingItem[];
};

/**
 * @summary Subscribe someone to the event.
 */
export const getSubscribeToEventUrl = () => {


  

  return `http://localhost:3333/subscription`
}

export const subscribeToEvent = async (subscribeToEventBody: SubscribeToEventBody, options?: RequestInit): Promise<SubscribeToEvent201> => {
  
  const res = await fetch(getSubscribeToEventUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      subscribeToEventBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: SubscribeToEvent201 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Access invite link and redirect user
 */
export const getGetInvitesSubscriberIDUrl = (subscriberID: string,) => {


  

  return `http://localhost:3333/invites/${subscriberID}`
}

export const getInvitesSubscriberID = async (subscriberID: string, options?: RequestInit): Promise<unknown> => {
  
  const res = await fetch(getGetInvitesSubscriberIDUrl(subscriberID),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: unknown = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Get subscribers invite click count
 */
export const getGetSubscribersSubscriberIDRankingClicksUrl = (subscriberID: string,) => {


  

  return `http://localhost:3333/subscribers/${subscriberID}/ranking/clicks`
}

export const getSubscribersSubscriberIDRankingClicks = async (subscriberID: string, options?: RequestInit): Promise<GetSubscribersSubscriberIDRankingClicks200> => {
  
  const res = await fetch(getGetSubscribersSubscriberIDRankingClicksUrl(subscriberID),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIDRankingClicks200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Get subscribers invite count
 */
export const getGetSubscribersSubscriberIDRankingCountUrl = (subscriberID: string,) => {


  

  return `http://localhost:3333/subscribers/${subscriberID}/ranking/count`
}

export const getSubscribersSubscriberIDRankingCount = async (subscriberID: string, options?: RequestInit): Promise<GetSubscribersSubscriberIDRankingCount200> => {
  
  const res = await fetch(getGetSubscribersSubscriberIDRankingCountUrl(subscriberID),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIDRankingCount200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Get subscribers ranking position
 */
export const getGetSubscribersSubscriberIDRankingPositionUrl = (subscriberID: string,) => {


  

  return `http://localhost:3333/subscribers/${subscriberID}/ranking/position`
}

export const getSubscribersSubscriberIDRankingPosition = async (subscriberID: string, options?: RequestInit): Promise<GetSubscribersSubscriberIDRankingPosition200> => {
  
  const res = await fetch(getGetSubscribersSubscriberIDRankingPositionUrl(subscriberID),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIDRankingPosition200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Get ranking
 */
export const getGetRankingUrl = () => {


  

  return `http://localhost:3333/ranking`
}

export const getRanking = async ( options?: RequestInit): Promise<GetRanking200> => {
  
  const res = await fetch(getGetRankingUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetRanking200 = body ? JSON.parse(body) : {}

  return data
}
